import{_ as t,c as a,a2 as r,o}from"./chunks/framework.C5GEIE5F.js";const p=JSON.parse('{"title":"Class: PgIndex<T>","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/schema/classes/PgIndex.md","filePath":"reference/api/schema/classes/PgIndex.md"}'),d={name:"reference/api/schema/classes/PgIndex.md"};function s(n,e,h,c,l,i){return o(),a("div",null,e[0]||(e[0]=[r('<p><a href="./../../modules.html">monolayer</a> / <a href="./../">schema</a> / PgIndex</p><h1 id="class-pgindex-t" tabindex="-1">Class: PgIndex&lt;T&gt; <a class="header-anchor" href="#class-pgindex-t" aria-label="Permalink to &quot;Class: PgIndex\\&lt;T\\&gt;&quot;">​</a></h1><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Parameter</th></tr></thead><tbody><tr><td><code>T</code> <em>extends</em> <code>string</code> | <code>string</code> &amp; <code>Record</code>&lt;<code>string</code>, <code>never</code>&gt;</td></tr></tbody></table><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="expression" tabindex="-1">expression() <a class="header-anchor" href="#expression" aria-label="Permalink to &quot;expression()&quot;">​</a></h3><blockquote><p><strong>expression</strong>(<code>expression</code>): <a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p></blockquote><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th></tr></thead><tbody><tr><td><code>expression</code></td><td><code>Expression</code>&lt;<code>SqlBool</code>&gt;</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p><hr><h3 id="external" tabindex="-1">external() <a class="header-anchor" href="#external" aria-label="Permalink to &quot;external()&quot;">​</a></h3><blockquote><p><strong>external</strong>(): <a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p></blockquote><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p><hr><h3 id="ifnotexists" tabindex="-1">ifNotExists() <a class="header-anchor" href="#ifnotexists" aria-label="Permalink to &quot;ifNotExists()&quot;">​</a></h3><blockquote><p><strong>ifNotExists</strong>(): <a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p></blockquote><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p><hr><h3 id="nullsnotdistinct" tabindex="-1">nullsNotDistinct() <a class="header-anchor" href="#nullsnotdistinct" aria-label="Permalink to &quot;nullsNotDistinct()&quot;">​</a></h3><blockquote><p><strong>nullsNotDistinct</strong>(): <a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p></blockquote><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p><hr><h3 id="unique" tabindex="-1">unique() <a class="header-anchor" href="#unique" aria-label="Permalink to &quot;unique()&quot;">​</a></h3><blockquote><p><strong>unique</strong>(): <a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p></blockquote><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p><hr><h3 id="using" tabindex="-1">using() <a class="header-anchor" href="#using" aria-label="Permalink to &quot;using()&quot;">​</a></h3><blockquote><p><strong>using</strong>(<code>indexType</code>): <a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p></blockquote><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th></tr></thead><tbody><tr><td><code>indexType</code></td><td><code>string</code></td></tr></tbody></table><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./PgIndex.html"><code>PgIndex</code></a>&lt;<code>T</code>&gt;</p><hr><h3 id="where" tabindex="-1">where() <a class="header-anchor" href="#where" aria-label="Permalink to &quot;where()&quot;">​</a></h3><h4 id="where-lhs-op-rhs" tabindex="-1">where(lhs, op, rhs) <a class="header-anchor" href="#where-lhs-op-rhs" aria-label="Permalink to &quot;where(lhs, op, rhs)&quot;">​</a></h4><blockquote><p><strong>where</strong>(<code>lhs</code>, <code>op</code>, <code>rhs</code>): <code>this</code></p></blockquote><h5 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th></tr></thead><tbody><tr><td><code>lhs</code></td><td><code>Expression</code>&lt;<code>any</code>&gt; | <code>T</code></td></tr><tr><td><code>op</code></td><td><code>ComparisonOperatorExpression</code></td></tr><tr><td><code>rhs</code></td><td><code>unknown</code></td></tr></tbody></table><h5 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>this</code></p><h4 id="where-factory" tabindex="-1">where(factory) <a class="header-anchor" href="#where-factory" aria-label="Permalink to &quot;where(factory)&quot;">​</a></h4><blockquote><p><strong>where</strong>(<code>factory</code>): <code>this</code></p></blockquote><h5 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th></tr></thead><tbody><tr><td><code>factory</code></td><td>(<code>qb</code>) =&gt; <code>Expression</code>&lt;<code>SqlBool</code>&gt;</td></tr></tbody></table><h5 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>this</code></p><h4 id="where-expression" tabindex="-1">where(expression) <a class="header-anchor" href="#where-expression" aria-label="Permalink to &quot;where(expression)&quot;">​</a></h4><blockquote><p><strong>where</strong>(<code>expression</code>): <code>this</code></p></blockquote><h5 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th></tr></thead><tbody><tr><td><code>expression</code></td><td><code>Expression</code>&lt;<code>SqlBool</code>&gt;</td></tr></tbody></table><h5 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>this</code></p>',58)]))}const b=t(d,[["render",s]]);export{p as __pageData,b as default};
