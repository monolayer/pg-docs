import{_ as t,c as o,a2 as a,o as n}from"./chunks/framework.BBV1ZMcZ.js";const p=JSON.parse('{"title":"Type Alias: TriggerOptions<T>","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/schema/type-aliases/TriggerOptions.md","filePath":"reference/api/schema/type-aliases/TriggerOptions.md"}'),r={name:"reference/api/schema/type-aliases/TriggerOptions.md"};function i(c,e,d,l,s,h){return n(),o("div",null,e[0]||(e[0]=[a('<p><a href="./../../modules.html">monolayer</a> / <a href="./../">schema</a> / TriggerOptions</p><h1 id="type-alias-triggeroptions-t" tabindex="-1">Type Alias: TriggerOptions&lt;T&gt; <a class="header-anchor" href="#type-alias-triggeroptions-t" aria-label="Permalink to &quot;Type Alias: TriggerOptions\\&lt;T\\&gt;&quot;">​</a></h1><blockquote><p><strong>TriggerOptions</strong>&lt;<code>T</code>&gt;: <code>object</code></p></blockquote><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Parameter</th></tr></thead><tbody><tr><td><code>T</code> <em>extends</em> <code>string</code> | <code>undefined</code></td></tr></tbody></table><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="columns" tabindex="-1">columns? <a class="header-anchor" href="#columns" aria-label="Permalink to &quot;columns?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>columns</strong>: <code>T</code>[]</p></blockquote><p>Target columns for <code>update of</code> events.</p><h3 id="condition" tabindex="-1">condition? <a class="header-anchor" href="#condition" aria-label="Permalink to &quot;condition?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>condition</strong>: <code>RawBuilder</code>&lt;<code>string</code>&gt;</p></blockquote><p>A Boolean expression that determines whether the trigger function will actually be executed.</p><h3 id="events" tabindex="-1">events? <a class="header-anchor" href="#events" aria-label="Permalink to &quot;events?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>events</strong>: (<code>&quot;insert&quot;</code> | <code>&quot;update&quot;</code> | <code>&quot;delete&quot;</code> | <code>&quot;truncate&quot;</code> | <code>&quot;update of&quot;</code>)[]</p></blockquote><p>The event that will fire the trigger. Multiple events can be specified.</p><ul><li><code>insert</code>: the trigger is fired on insert events.</li><li><code>update</code>: the trigger is fired on update events.</li><li><code>delete</code>: the trigger is fired on delete events.</li><li><code>truncate</code>: the trigger is fired on truncate events.</li><li><code>update of</code>: the trigger is fired on update events that affect the specified columns.</li></ul><p>For <code>update of</code> events, you need to specify a list of columns in the <code>columns</code> property. The trigger will only fire if at least one of the listed columns is mentioned as a target of the update or if one of the listed columns is a generated column that depends on a column that is the target of the update.</p><h3 id="firewhen" tabindex="-1">fireWhen <a class="header-anchor" href="#firewhen" aria-label="Permalink to &quot;fireWhen&quot;">​</a></h3><blockquote><p><strong>fireWhen</strong>: <code>&quot;before&quot;</code> | <code>&quot;after&quot;</code> | <code>&quot;instead of&quot;</code></p></blockquote><p>Controls when the trigger function is called.</p><ul><li><code>before</code>: The function is called before the event.</li><li><code>after</code>: The function is called after the event.</li><li><code>instead of</code>: The function is called instead of the event.</li></ul><h3 id="foreach" tabindex="-1">forEach <a class="header-anchor" href="#foreach" aria-label="Permalink to &quot;forEach&quot;">​</a></h3><blockquote><p><strong>forEach</strong>: <code>&quot;row&quot;</code> | <code>&quot;statement&quot;</code></p></blockquote><p>Controls whether the trigger function should be fired once for every row affected by the trigger event, or just once per SQL statement.</p><h3 id="function" tabindex="-1">function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;function&quot;">​</a></h3><blockquote><p><strong>function</strong>: <code>object</code></p></blockquote><p>Function which is executed when the trigger fires. Options:</p><ul><li><code>name</code>: The name of the function.</li><li><code>args</code>: Arguments to pass to the function.</li></ul><h3 id="function-args" tabindex="-1">function.args? <a class="header-anchor" href="#function-args" aria-label="Permalink to &quot;function.args?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>args</strong>: (<code>string</code> | <code>RawBuilder</code>&lt;<code>unknown</code>&gt;)[]</p></blockquote><p>List of arguments to pass to the function. When referencing columns, use the <code>sql</code> helper.</p><h3 id="function-name" tabindex="-1">function.name <a class="header-anchor" href="#function-name" aria-label="Permalink to &quot;function.name&quot;">​</a></h3><blockquote><p><strong>name</strong>: <code>string</code></p></blockquote><p>The name of the function.</p><h3 id="referencingnewtableas" tabindex="-1">referencingNewTableAs? <a class="header-anchor" href="#referencingnewtableas" aria-label="Permalink to &quot;referencingNewTableAs?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>referencingNewTableAs</strong>: <code>string</code></p></blockquote><p>Relation name that the trigger can use to access the after-image transition relation (row sets that include all of the rows inserted, deleted, or modified by the current SQL statement).</p><p>Allows triggers to see a global view of what the statement did, not just one row at a time.</p><h3 id="referencingoldtableas" tabindex="-1">referencingOldTableAs? <a class="header-anchor" href="#referencingoldtableas" aria-label="Permalink to &quot;referencingOldTableAs?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>referencingOldTableAs</strong>: <code>string</code></p></blockquote><p>Relation name that the trigger can use to access the before-image transition relation (row sets that include all of the rows inserted, deleted, or modified by the current SQL statement).</p><p>Allows triggers to see a global view of what the statement did, not just one row at a time.</p>',42)]))}const f=t(r,[["render",i]]);export{p as __pageData,f as default};
