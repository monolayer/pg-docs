import{_ as t,c as a,a2 as r,o as s}from"./chunks/framework.BVrlcXZz.js";const m=JSON.parse('{"title":"Class: Schema<T, S>","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/schema/classes/Schema.md","filePath":"reference/api/schema/classes/Schema.md"}'),o={name:"reference/api/schema/classes/Schema.md"};function d(c,e,n,i,h,l){return s(),a("div",null,e[0]||(e[0]=[r('<p><a href="./../../modules.html">monolayer-pg</a> / <a href="./../">schema</a> / Schema</p><h1 id="class-schema-t-s" tabindex="-1">Class: Schema&lt;T, S&gt; <a class="header-anchor" href="#class-schema-t-s" aria-label="Permalink to &quot;Class: Schema\\&lt;T, S\\&gt;&quot;">​</a></h1><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Parameter</th></tr></thead><tbody><tr><td><code>T</code> <em>extends</em> <code>TableRecord</code></td></tr><tr><td><code>S</code> <em>extends</em> <code>string</code></td></tr></tbody></table><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Property</th><th>Modifier</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>_tables</code></td><td><code>protected</code></td><td><code>T</code></td><td>-</td></tr><tr><td><code>infer</code></td><td><code>public</code></td><td><code>TableInfer</code>&lt;<code>T</code>&gt;</td><td>Infers types to be used as the Kysely database schema type definition. <strong>Remarks</strong> Infers types for select, insert and update operations, taking into account the column data type, constraints, generated values, and default data values. <strong>TypeScript Types</strong> Each column has a TypeScript type for its select, insert, and update operations:</td></tr><tr><td><code>inferWithSchemaNamespace</code></td><td><code>public</code></td><td><code>TableInferWithSchema</code>&lt;<code>T</code>, <code>S</code>&gt;</td><td>Infers types with a schema namespace to be used as the Kysely database schema type definition. <strong>Remarks</strong> Infers types for select, insert and update operations, taking into account the database schema, column data type, constraints, generated values, and default data values. <strong>TypeScript Types</strong> Each column has a TypeScript type for its select, insert, and update operations:</td></tr></tbody></table><h2 id="accessors" tabindex="-1">Accessors <a class="header-anchor" href="#accessors" aria-label="Permalink to &quot;Accessors&quot;">​</a></h2><h3 id="tables" tabindex="-1">tables <a class="header-anchor" href="#tables" aria-label="Permalink to &quot;tables&quot;">​</a></h3><h4 id="get-signature" tabindex="-1">Get Signature <a class="header-anchor" href="#get-signature" aria-label="Permalink to &quot;Get Signature&quot;">​</a></h4><blockquote><p><strong>get</strong> <strong>tables</strong>(): <code>T</code></p></blockquote><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>T</code></p>',12)]))}const u=t(o,[["render",d]]);export{m as __pageData,u as default};
