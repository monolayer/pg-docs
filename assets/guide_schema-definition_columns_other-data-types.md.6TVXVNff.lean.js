import{_ as t,c as e,a2 as a,o as i}from"./chunks/framework.C5GEIE5F.js";const k=JSON.parse('{"title":"Other column data types","description":"","frontmatter":{},"headers":[],"relativePath":"guide/schema-definition/columns/other-data-types.md","filePath":"guide/schema-definition/columns/other-data-types.md"}'),n={name:"guide/schema-definition/columns/other-data-types.md"};function h(p,s,l,o,r,d){return i(),e("div",null,s[0]||(s[0]=[a(`<h1 id="other-column-data-types" tabindex="-1">Other column data types <a class="header-anchor" href="#other-column-data-types" aria-label="Permalink to &quot;Other column data types&quot;">â€‹</a></h1><p>Column data types other than the default <a href="./data-types.html">data types</a> provided by <code>monolayer-pg</code> can be defined with the <a href="./../../../reference/api/schema/functions/columnWithType.html">columnWithType</a> function.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> accounts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  amount: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">columnWithType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;money&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>You need specify the Select and Insert types to the function, otherwise the inferred type will be any.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you use <code>Kysely</code> as your query builder, these types should map to the types that PostgreSQL driver (<a href="https://node-postgres.com/features/types" target="_blank" rel="noreferrer">node-postgres</a>) will expect and return on queries.</p></div>`,5)]))}const u=t(n,[["render",h]]);export{k as __pageData,u as default};
